AWSTemplateFormatVersion: 2010-09-09
Conditions:
  AssignPublicIp: !Not
    - !Equals
      - !Ref NoPublicIp
      - 'true'
  ConfigureBackups: !Not
    - !Equals
      - !Ref SnapshotFrequency
      - ''
  CreateSnsSubscription: !Not
    - !Equals
      - !Ref NotificationEmail
      - ''
  InstallCloudWatchAgent: !Not
    - !Equals
      - !Ref CloudWatchAgentUrl
      - ''
  UseAmiLookup: !Equals
    - !Ref AmiId
    - ''
  UseVolumeSnapshot: !Not
    - !Equals
      - !Ref DataVolumeSnapshotId
      - ''
Description: This template deploys a Connection Broker (master) and a file server for home directories and profiles.
Mappings:
  InstanceTypeMap:
    'Fn::Transform':
      Name: AWS::Include
      Parameters:
        Location: s3://app-chemistry/snippets/instance_type_map.snippet.cfn.yaml
  ShellCommandMap:
    'Fn::Transform':
      Name: AWS::Include
      Parameters:
        Location: s3://app-chemistry/snippets/shell_command_map.snippet.cfn.yaml
  CfnUtilsMap:
    Init:
      Launch: cfn-init.exe -v -c launch --resource RdCbFileServerInstance
      Update: cfn-init.exe -v -c update --resource RdCbFileServerInstance
    Signal:
      Success: cfn-signal.exe -e 0 --resource RdCbFileServerInstance
      Failure: cfn-signal.exe -e 1 --resource RdCbFileServerInstance
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - AmiNameSearchString
          - AmiId
          - InstanceType
          - KeyPairName
          - DataVolumeSnapshotId
          - DataVolumeSize
          - ExtraSecurityGroupIds
          - PatchSchedule
          - PatchSnsTopicArn
      - Label:
          default: RDCB Application Configuration
        Parameters:
          - DomainDirectoryId
          - DomainDnsName
          - DomainNetbiosName
          - DomainAccessUserGroup
          - SsmKeyId
          - SsmRdcbCredential
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - Ec2SubnetAz
          - Ec2SubnetId
          - NoPublicIp
      - Label:
          default: CloudFormation Configuration
        Parameters:
          - CloudWatchAgentUrl
      - Label:
          default: Management Configuration
        Parameters:
          - NotificationEmail
    ParameterLabels:
      AmiNameSearchString:
        default: AMI Name Search Pattern
  Version: 0.5.0
  cfn-lint:
    config:
      ignore_checks:
        - E3001
        - E7001
        - W1011
Outputs:
  RdcbEc2InstanceId:
    Description: Instance ID of the RDCB File Server
    Value: !Ref RdCbFileServerInstance
  RdcbEc2InstanceIp:
    Description: IP address of the RDCB File Server
    Value: !Sub ${RdCbFileServerInstance.PrivateIp}
  SnsArn:
    Description: ARN for SNS topic
    Value: !Ref SnsTopic
Parameters:
  AmiId:
    Default: ''
    Description: (Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString
    Type: String
  AmiNameSearchString:
    Default: Windows_Server-2016-English-Full-Base-*
    Description: Search pattern to match against an AMI Name
    Type: String
  CloudWatchAgentUrl:
    AllowedPattern: ^$|^https://.*\.msi$
    Default: ''
    Description: '(Optional) S3 URL to CloudWatch Agent MSI. Example: https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi'
    Type: String
  DataVolumeSize:
    Default: '5'
    Description: Size of the data volume to attach to the instance
    MaxValue: '16384'
    MinValue: '1'
    Type: Number
  DataVolumeSnapshotId:
    AllowedPattern: ^$|snap-[a-zA-Z0-9]{8}|snap-[a-zA-Z0-9]{17}
    Default: ''
    Description: (Optional) Snapshot ID of an existing EBS volume. Leave blank to instantiate an empty volume
    Type: String
  DomainAccessUserGroup:
    Default: Domain Users
    Description: Domain group of users authorized to use the remote access solution
    MinLength: '1'
    Type: String
  DomainDirectoryId:
    AllowedPattern: d-[a-zA-Z0-9]{10}
    Description: ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx
    Type: String
  DomainDnsName:
    AllowedPattern: '[a-zA-Z0-9-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the forest root domain, e.g. example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainNetbiosName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: EXAMPLE
    Description: NetBIOS name of the domain (e.g. EXAMPLE)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  Ec2SubnetAz:
    Description: Availability zone of the private subnet
    Type: AWS::EC2::AvailabilityZone::Name
  Ec2SubnetId:
    Description: Private Subnet ID where the file server will run
    Type: AWS::EC2::Subnet::Id
  ExtraSecurityGroupIds:
    Description: List of extra Security Group IDs to attach to the RDCB EC2 instance
    Type: List<AWS::EC2::SecurityGroup::Id>
  ForceCfnInitUpdate:
    AllowedValues:
      - A
      - B
    Default: A
    Description: Toggles a cfn-init metadata update even if nothing else changes
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c5.large
      - c5.xlarge
      - m5.large
      - m5.xlarge
      - r4.large
      - r4.xlarge
    Default: t2.medium
    Description: Amazon EC2 instance type for the Remote Desktop Session Instance
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  NoPublicIp:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'true'
    Description: Controls whether to assign the instances a public IP. Recommended to leave at "true" _unless_ launching in a public subnet
    Type: String
  NotificationEmail:
    AllowedPattern: ^$|.*[@].*
    Description: (Optional) Email address to subscribe to notifications and alarms
    Type: String
  PatchSchedule:
    Description: Schedule used to apply patches to the instance
    Type: String
    Default: cron(0 6 ? * Sat *)
  PatchSnsTopicArn:
    Description: SNS Topic used for patch status notifications
    Type: String
  RepoBranchPrefixUrl:
    Description: URL prefix where the repo scripts can be retrieved
    Default: https://raw.githubusercontent.com/plus3it/cfn/master
    Type: String
    AllowedPattern: ^https:/.*
  SnapshotFrequency:
    Description: (Optional) Specify an interval in minutes to configure snapshots of the EBS fileshare volume. Set an empty value "" to skip configuring snapshots. Default interval is 60 minutes.
    Default: '60'
    Type: String
  SsmKeyId:
    AllowedPattern: ^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$
    Description: KMS Key ID used to encrypt/decrypt the SsmRdcbCredential
    Type: String
  SsmRdcbCredential:
    AllowedPattern: ^(?!^([aA][wW][sS]|[sS][sS][mM]))(?=^[a-zA-Z0-9_./-]*$).*$
    Description: SSM Parameter Name for a SecureString containing the domain credential for the RDCB service account; SSM Parameter Value format is '@{Username = "<user>"; Password = "<password>"}'
    MaxLength: '1024'
    MinLength: '1'
    Type: String
  TerminationProtection:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'true'
    Description: Enable or disable instance termination protection.  Protection is enabled by default.
    Type: String
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
Resources:
  AmiIdLookup:
    Condition: UseAmiLookup
    Properties:
      AmiNameSearchString: !Ref AmiNameSearchString
      Region: !Ref AWS::Region
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-look-up-ami-ids
    Type: Custom::AmiIdLookup
  DataVolume:
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AvailabilityZone: !Ref Ec2SubnetAz
      Size: !Ref DataVolumeSize
      SnapshotId: !If [UseVolumeSnapshot, !Ref DataVolumeSnapshotId, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Consistency Group
          Value: BackupGroup01
      VolumeType: gp2
    Type: AWS::EC2::Volume
  Ec2IamInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref Ec2IamRole
    Type: AWS::IAM::InstanceProfile
  Ec2IamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
    Type: AWS::IAM::Role
  Ec2IamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:CreateTags
            Condition:
              StringLike:
                'ec2:ParentVolume': !Sub arn:aws:ec2:${AWS::Region}:*:volume/${DataVolume}
            Effect: Allow
            Resource: '*'
            Sid: AllowRestrictedSnapshotActions
          - Action:
              - ec2:CreateSnapshot
              - ec2:DeleteSnapshot
              - ec2:DescribeSnapshots
              - ec2:DescribeVolumes
            Effect: Allow
            Resource: '*'
            Sid: AllowSnapshotActions
          - Action:
              - ssm:GetParameters
            Effect: Allow
            Resource: !Sub arn:aws:ssm:*:*:parameter/${SsmRdcbCredential}
            Sid: AllowSsmGetParameters
          - Action:
              - kms:Decrypt
            Effect: Allow
            Resource: !Sub arn:aws:kms:*:*:key/${SsmKeyId}
            Sid: AllowKmsDecrypt
        Version: 2012-10-17
      PolicyName: !Sub rdcb-ec2-${AWS::StackName}
      Roles:
        - !Ref Ec2IamRole
    Type: AWS::IAM::Policy
  Ec2LowDiskSpaceAlarm20C:
    Properties:
      AlarmActions:
        - !Ref SnsTopic
      AlarmDescription: 'Trigger alarm when C: volume has less than 20% free disk space'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref RdCbFileServerInstance
      EvaluationPeriods: 5
      MetricName: LogicalDiskPercentFreeSpace_C
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 20
    Type: AWS::CloudWatch::Alarm
  Ec2LowDiskSpaceAlarm20D:
    Properties:
      AlarmActions:
        - !Ref SnsTopic
      AlarmDescription: 'Trigger alarm when D: volume has less than 20% free disk space'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref RdCbFileServerInstance
      EvaluationPeriods: 5
      MetricName: LogicalDiskPercentFreeSpace_D
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 20
    Type: AWS::CloudWatch::Alarm
  Ec2LowDiskSpaceAlarm40C:
    Properties:
      AlarmActions:
        - !Ref SnsTopic
      AlarmDescription: 'Trigger alarm when C: volume has less than 40% free disk space'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref RdCbFileServerInstance
      EvaluationPeriods: 5
      MetricName: LogicalDiskPercentFreeSpace_C
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 40
    Type: AWS::CloudWatch::Alarm
  Ec2LowDiskSpaceAlarm40D:
    Properties:
      AlarmActions:
        - !Ref SnsTopic
      AlarmDescription: 'Trigger alarm when D: volume has less than 40% free disk space'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref RdCbFileServerInstance
      EvaluationPeriods: 5
      MetricName: LogicalDiskPercentFreeSpace_D
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 40
    Type: AWS::CloudWatch::Alarm
  Ec2RecoveryAlarm:
    Properties:
      AlarmActions:
        - !Sub arn:aws:automate:${AWS::Region}:ec2:recover
      AlarmDescription: Trigger a recovery when instance status check fails for 15 consecutive minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref RdCbFileServerInstance
      EvaluationPeriods: 15
      MetricName: StatusCheckFailed_System
      Namespace: AWS/EC2
      Period: 60
      Statistic: Minimum
      Threshold: 0
    Type: AWS::CloudWatch::Alarm
  Ec2SelfIngressAll:
    Properties:
      GroupId: !Ref RdcbEc2SecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref RdcbEc2SecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
  InstanceLogGroup:
    Condition: InstallCloudWatchAgent
    Properties:
      LogGroupName: !Sub /aws/ec2/win/${AWS::StackName}
    Type: AWS::Logs::LogGroup
  RdCbFileServerInstance:
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    Metadata:
      'AWS::CloudFormation::Init':
        cfnsetup:
          commands:
            50-set-execution-policy:
              command: powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force
              waitAfterCompletion: '0'
            51-online-disks:
              command: powershell.exe "foreach ($disk in (Get-CimInstance -ClassName Win32_DiskDrive)) { Set-Disk -Number $disk.Index -IsOffline $false }"
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
            52-initialize-disks:
              command: powershell.exe C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeDisks.ps1
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
            53-extend-disks:
              command: powershell.exe c:\cfn\scripts\extend-volumes.ps1 -verbose
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
            54-unzip-pstools:
              command: powershell.exe c:\cfn\scripts\unzip-archive.ps1 c:\cfn\files\pstools.zip c:\cfn\files\pstools
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
            'c:\cfn\files\pstools.zip':
              source: 'https://download.sysinternals.com/files/PSTools.zip'
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Sub
                - |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.RdCbFileServerInstance.Metadata
                  action=${InitUpdate}
                - InitUpdate: !Sub
                    - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
                    - Command: !FindInMap [CfnUtilsMap, Init, Update]
            'c:\cfn\scripts\unzip-archive.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/unzip-archive.ps1
            'c:\cfn\scripts\configure-ebsbackups.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/configure-ebsbackups.ps1
            'c:\cfn\scripts\configure-fileshares.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/configure-fileshares.ps1
            'c:\cfn\scripts\configure-rdcb.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/configure-rdcb.ps1
            'c:\cfn\scripts\snap-by-group.ps1':
              source: https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapByCgroup.ps1
            'c:\cfn\scripts\snap-maintenance.ps1':
              source: https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapMaint.ps1
            'c:\cfn\scripts\extend-volumes.ps1':
              content: |
                [CmdLetBinding()]
                Param()
                foreach ($disk in (Get-Disk)) {
                  $disk | Update-Disk
                  $Size = (Get-Partition -DiskNumber $disk.Number -PartitionNumber 1).size
                  $SizeMax = (Get-PartitionSupportedSize -DiskNumber $disk.Number).SizeMax
                  Write-Verbose "Disk: $($disk.Number); Current Size: $Size; Maximum Size: $SizeMax"
                  if ($SizeMax -gt $Size) {
                    Resize-Partition -DiskNumber $disk.Number -PartitionNumber 1 -Size $SizeMax
                    Write-Verbose "Extended disk $($disk.Number) partition 1"
                  } else {
                    Write-Verbose "No change to disk $($disk.Number) partition 1"
                  }
                }
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
        configSets:
          launch:
            - join-domain
            - ps-modules
            - install-cloudwatch-agent
            - cfnsetup
            - install-roles
            - reboot
            - configure-fileshares
            - !If
              - ConfigureBackups
              - configure-backups
              - !Ref "AWS::NoValue"
            - configure-admins
            - configure-rdcb
            - configure-rdcb-cleanup
            - reboot
            - finalize
          update:
            - ps-modules
            - install-cloudwatch-agent
            - cfnsetup
            - configure-rdcb-cleanup
            - finalize
        configure-admins:
          commands:
            10-configure-admins:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "Invoke-Command -ScriptBlock {
                  $ErrorActionPreference = 'Stop';
                  Import-Module RemoteDesktop,RemoteDesktopServices;
                  $admin = (Invoke-Expression ((Get-SSMParameterValue -Name ${SsmRdcbCredential} -WithDecryption $true).Parameters | ? {$_.Name -eq '${SsmRdcbCredential}' }).Value).Username + '@${DomainNetbiosName}';
                  if (-not ($admin -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) { [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', $admin); }
                  }
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        configure-backups:
          commands:
            10-configure-backups:
              command: !Sub
                - >-
                  ${PowershellCommand} c:\cfn\scripts\configure-ebsbackups.ps1
                  -SnapshotScript 'C:\cfn\scripts\snap-by-group.ps1'
                  -SnapshotFrequency (New-TimeSpan -Minutes ${SnapshotFrequency})
                  -MaintenanceScript 'C:\cfn\scripts\snap-maintenance.ps1'
                  -ConsistencyGroup 'BackupGroup01'
                  -Verbose -ErrorAction Stop || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        configure-fileshares:
          commands:
            10-create-upd-folder:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  New-Item -ItemType directory -Path 'D:\Shares\Profiles$' -Force
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
            20-configure-fileshares:
              command: !Sub
                - >-
                  ${PowershellCommand} c:\cfn\scripts\configure-fileshares.ps1
                  -DomainNetbiosName '${DomainNetbiosName}'
                  -GroupName '${DomainAccessUserGroup}'
                  -Verbose -ErrorAction Stop || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        configure-rdcb-cleanup:
          commands:
            20-rdcb-cleanup:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "${PsExecCommand}
                  -u \"${DomainNetbiosName}\$((Invoke-Expression ((Get-SSMParameterValue -Name '${SsmRdcbCredential}' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '${SsmRdcbCredential}' }).Value).Username)\"
                  -p \"$((Invoke-Expression ((Get-SSMParameterValue -Name '${SsmRdcbCredential}' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '${SsmRdcbCredential}'}).Value).Password)\"
                  ${PowershellCommand} c:\cfn\scripts\cleanup-rdcb-schedule.ps1
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  PsExecCommand: !FindInMap [ShellCommandMap, psexec, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
          files:
            'c:\cfn\scripts\cleanup-rdcb.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/cleanup-rdcb.ps1
            'c:\cfn\scripts\logit.cmd':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/logit.cmd
            'c:\cfn\scripts\cleanup-rdcb-schedule.ps1':
              content: !Sub |
                [CmdLetBinding()]
                Param()
                Import-Module P3Utils
                $Credential = Invoke-Expression ((Get-SSMParameterValue -Name '${SsmRdcbCredential}' -WithDecryption $true).Parameters | ? {$_.Name -eq '${SsmRdcbCredential}' }).Value
                New-RepeatingTask `
                  -Name 'RDCB Cleanup' `
                  -Command 'c:\cfn\scripts\logit.cmd' `
                  -Arguments 'powershell.exe C:\cfn\scripts\cleanup-rdcb.ps1 -UpdPath D:\Shares\Profiles$ -DomainNetbiosName ${DomainNetbiosName} -Verbose -ErrorAction Stop >> c:\cfn\log\cleanup-rdcb.log 2>&1' `
                  -User $Credential.Username `
                  -SecurePassword ($Credential.Password | ConvertTo-SecureString -AsPlainText -Force) `
                  -StartTime (Get-Date -Hour 20 -Minute 0 -Second 0).AddDays(1) `
                  -RepetitionInterval (New-TimeSpan -Hours 24) `
                  -Force
        configure-rdcb:
          commands:
            20-configure-rdcb:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "${PsExecCommand}
                  -u \"${DomainNetbiosName}\$((Invoke-Expression ((Get-SSMParameterValue -Name '${SsmRdcbCredential}' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '${SsmRdcbCredential}' }).Value).Username)\"
                  -p \"$((Invoke-Expression ((Get-SSMParameterValue -Name '${SsmRdcbCredential}' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '${SsmRdcbCredential}'}).Value).Password)\"
                  ${PowershellCommand} c:\cfn\scripts\configure-rdcb.ps1
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  PsExecCommand: !FindInMap [ShellCommandMap, psexec, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        finalize:
          commands:
            10-signal-success:
              command: !Sub
                - ${SignalSuccess}
                - SignalSuccess: !Sub
                    - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
                    - Command: !FindInMap [CfnUtilsMap, Signal, Success]
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
        install-cloudwatch-agent:
          commands:
            10-configure-cloudwatch-agent:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Invoke-Command -ScriptBlock {
                  $ErrorActionPreference = 'Stop';
                  Import-Module P3Utils;
                  $CloudWatchAgentConfig = 'c:\cfn\files\aws-cloudwatch-agent-config.json';
                  $CloudWatchAgentCtl = \"${!Env:ProgramFiles}\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1\";
                  & $CloudWatchAgentCtl -Action cond-restart;
                  & $CloudWatchAgentCtl -a fetch-config -m ec2 -c file:$CloudWatchAgentConfig -s;
                  }
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
          files:
            'c:\cfn\files\aws-cloudwatch-agent-config.json':
              content: !Sub
                - |
                  {
                    "logs": {
                      "logs_collected" : {
                        "files" : {
                          "collect_list": [
                            {
                              "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/ProgramData/Amazon/AmazonCloudWatchAgent/Logs/amazon-cloudwatch-agent.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "c:\\cfn\\log\\cfn-init.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/cfn/log/cfn-init.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "c:\\cfn\\log\\cfn-init-cmd.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/cfn/log/cfn-init-cmd.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "c:\\cfn\\log\\cleanup-rdcb.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/cfn/log/cleanup-rdcb.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            }
                          ]
                        },
                        "windows_events" : {
                          "collect_list" : [
                            {
                              "event_name": "System",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/System",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Application",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/Application",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Microsoft-Rdms-UI/Operational",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/MS-Rdms-UI/Operational",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Microsoft-Windows-TerminalServices-SessionBroker/Operational",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/Microsoft-Windows-TerminalServices-SessionBroker/Operational",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Microsoft-Rdms-UI/Admin",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/MS-Rdms-UI/Admin",
                              "event_format": "text"
                            }
                          ]
                        }
                      },
                      "log_stream_name": "default_logs_{instance_id}"
                    }
                  }
                - local_InstanceLogGroup: !If [InstallCloudWatchAgent, !Ref InstanceLogGroup, !Ref 'AWS::NoValue']
          packages:
            msi:
              cloudwatch-agent: !Ref CloudWatchAgentUrl
          services:
            windows:
              AmazonCloudWatchAgent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\files\aws-cloudwatch-agent-config.json
        install-roles:
          commands:
            10-install-roles:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Import-Module P3Utils;
                  Invoke-RetryCommand
                  -Command Install-WindowsFeature
                  -ArgList @{Name=@(\"FS-FileServer\",\"RDS-Connection-Broker\",\"RDS-RD-Server\",\"RDS-Licensing\",\"RDS-Licensing-UI\")}
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        join-domain:
          commands:
            10-join-domain:
              command: !Sub
                - ${PowershellCommand} -Command Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
              waitAfterCompletion: forever
        ps-modules:
          files:
            'C:\Program Files\WindowsPowerShell\Modules\P3Utils\P3Utils.psd1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3Utils/P3Utils.psd1
            'C:\Program Files\WindowsPowerShell\Modules\P3Utils\P3Utils.psm1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3Utils/P3Utils.psm1
            'C:\Program Files\WindowsPowerShell\Modules\P3RemoteAccess\P3RemoteAccess.psd1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3RemoteAccess/P3RemoteAccess.psd1
            'C:\Program Files\WindowsPowerShell\Modules\P3RemoteAccess\P3RemoteAccess.psm1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3RemoteAccess/P3RemoteAccess.psm1
        reboot:
          commands:
            10-reboot:
              command: !Sub
                - ${PowershellCommand} -Command "Restart-Computer -Force -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: forever
      CfnUpdateTriggers:
        EbsVolumeSize: !Ref DataVolumeSize
        ForceCfnInitUpdate: !Ref ForceCfnInitUpdate
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 50
            VolumeType: gp2
      DisableApiTermination: !Ref TerminationProtection
      EbsOptimized: !FindInMap [InstanceTypeMap, !Ref InstanceType, SupportsEbsOptimized]
      IamInstanceProfile: !Ref Ec2IamInstanceProfile
      ImageId: !If [UseAmiLookup, !Sub '${AmiIdLookup.Id}', !Ref AmiId]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [AssignPublicIp, true, false]
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet: !Split
            - ','
            - !Sub
              - ${RdcbEc2SecurityGroup},${local_ExtraSecurityGroupIds}
              - local_ExtraSecurityGroupIds: !Join [',', !Ref ExtraSecurityGroupIds]
          SubnetId: !Ref Ec2SubnetId
      SsmAssociations:
        - DocumentName: !Sub awsconfig_Domain_${DomainDirectoryId}_${DomainDnsName}
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Patch Group
          Value: !Ref AWS::StackName
      UserData:
        Fn::Base64: !Sub
          - |
            <script>
            ${InitLaunch}
            if %ERRORLEVEL% equ 0 goto success

            :error
            ${SignalFailure}
            echo "ERROR: cfn-init failed! Aborting!"
            exit /b 1

            :success
            </script>
          - InitLaunch: !Sub
              - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
              - Command: !FindInMap [CfnUtilsMap, Init, Launch]
            SignalFailure: !Sub
              - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
              - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
      Volumes:
        - Device: /dev/xvdf
          VolumeId: !Ref DataVolume
    Type: AWS::EC2::Instance
  RdcbEc2SecurityGroup:
    Properties:
      GroupDescription: Logical container for an RDCB EC2 instance
      Tags:
        - Key: Name
          Value: !Sub rdcb-ec2-${AWS::StackName}
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup
  SnsSubscriptionEmail:
    Condition: CreateSnsSubscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref SnsTopic
    Type: AWS::SNS::Subscription
  SnsTopic:
    Type: AWS::SNS::Topic
  SsmAssociationCloudWatchMetrics:
    'Fn::Transform':
      Name: AWS::Include
      Parameters:
        Location: s3://app-chemistry/snippets/ssm_cloudwatch_instance_memory_disk_c_d.snippet.cfn.yaml
  PatchBaseline:
    Properties:
      ApprovalRules:
        PatchRules:
          - PatchFilterGroup:
              PatchFilters:
                - Key: MSRC_SEVERITY
                  Values:
                    - Critical
                    - Important
                - Key: CLASSIFICATION
                  Values:
                    - SecurityUpdates
                    - CriticalUpdates
                - Key: PRODUCT
                  Values:
                    - WindowsServer2016
            ApproveAfterDays: 7
            ComplianceLevel: CRITICAL
      Description: !Sub Patch baseline for ${AWS::StackName}
      Name: !Ref AWS::StackName
      OperatingSystem: WINDOWS
      PatchGroups:
        - !Ref AWS::StackName
    Type: AWS::SSM::PatchBaseline
  MaintenanceWindow:
    Properties:
      AllowUnassociatedTargets: false
      Cutoff: 1
      Description: !Sub Maintenance Window to patch ${AWS::StackName}
      Duration: 3
      Name: !Ref AWS::StackName
      Schedule: !Ref PatchSchedule
    Type: AWS::SSM::MaintenanceWindow
  MaintenanceWindowTask:
    Properties:
      MaxConcurrency: '5'
      MaxErrors: '5'
      Name: !Ref AWS::StackName
      Priority: 1
      ServiceRoleArn: !Sub ${MaintenanceWindowIamRole.Arn}
      Targets:
        - Key: WindowTargetIds
          Values:
            - !Ref MaintenanceWindowTarget
      TaskArn: AWS-ApplyPatchBaseline
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          NotificationConfig:
            NotificationArn: !Ref PatchSnsTopicArn
            NotificationEvents:
              - All
            NotificationType: Invocation
          Parameters:
            Operation:
              - Install
          ServiceRoleArn: !Sub ${MaintenanceWindowSnsIamRole.Arn}
      TaskType: RUN_COMMAND
      WindowId: !Ref MaintenanceWindow
    Type: AWS::SSM::MaintenanceWindowTask
  MaintenanceWindowTarget:
    Properties:
      Name: !Ref AWS::StackName
      ResourceType: INSTANCE
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref RdCbFileServerInstance
      WindowId: !Ref MaintenanceWindow
    Type: AWS::SSM::MaintenanceWindowTarget
  MaintenanceWindowIamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:CancelCommand
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                  - ssm:ListCommands
                  - ssm:SendCommand
                  - ssm:GetAutomationExecution
                  - ssm:GetParameters
                  - ssm:StartAutomationExecution
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - arn:aws:lambda:*:*:function:SSM*
                  - arn:aws:lambda:*:*:function:*:SSM*
              - Action:
                  - states:DescribeExecution
                  - states:StartExecution
                Effect: Allow
                Resource:
                  - arn:aws:states:*:*:stateMachine:SSM*
                  - arn:aws:states:*:*:execution:SSM*
              - Action:
                  - resource-groups:ListGroups
                  - resource-groups:ListGroupResources
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - tag:GetResources
                Effect: Allow
                Resource:
                  - '*'
              - Action: iam:PassRole
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - ssm.amazonaws.com
                Effect: Allow
                Resource: !Sub ${MaintenanceWindowSnsIamRole.Arn}
            Version: 2012-10-17
          PolicyName: !Ref AWS::StackName
    Type: AWS::IAM::Role
  MaintenanceWindowSnsIamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource:
                  - !Ref PatchSnsTopicArn
            Version: 2012-10-17
          PolicyName: !Ref AWS::StackName
    Type: AWS::IAM::Role
