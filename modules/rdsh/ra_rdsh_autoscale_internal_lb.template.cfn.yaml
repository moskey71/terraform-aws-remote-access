AWSTemplateFormatVersion: 2010-09-09
Conditions:
  InstallCloudWatchAgent: !Not
    - !Equals
      - !Ref CloudWatchAgentUrl
      - ''
  UseAmiLookup: !Equals
    - !Ref AmiId
    - ''
  UseAutoUpdateStack: !Not
    - !Equals
      - !Ref UpdateSchedule
      - ''
  UseScheduledAction: !And
    - !Not
      - !Equals
        - !Ref ScaleUpSchedule
        - ''
    - !Not
      - !Equals
        - !Ref ScaleDownSchedule
        - ''
Description: This template deploys Remote Desktop Session Host (RDSH) instances in an autoscale group behind an ELB, and joins them to a domain.
Mappings:
  InstanceTypeMap:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: 's3://app-chemistry/snippets/instance_type_map.snippet.cfn.yaml'
  ShellCommandMap:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: 's3://app-chemistry/snippets/shell_command_map.snippet.cfn.yaml'
  CfnUtilsMap:
    Init:
      Config: cfn-init.exe -v -c config --resource LaunchConfig
      Update: cfn-init.exe -v -c update --resource LaunchConfig
    Signal:
      Success: cfn-signal.exe -e 0 --resource AutoScalingGroup
      Failure: cfn-signal.exe -e 1 --resource AutoScalingGroup
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - AmiNameSearchString
          - AmiId
          - InstanceType
          - KeyPairName
          - ExtraSecurityGroupIds
      - Label:
          default: RDSH Application Configuration
        Parameters:
          - DomainDirectoryId
          - DomainDnsName
          - DomainNetbiosName
          - DomainSvcAccount
          - DomainSvcPassword
          - DomainAccessUserGroup
          - LdapContainerOU
          - ConnectionBrokerFqdn
          - UserProfileDiskPath
          - RdpPrivateKeyS3Endpoint
          - RdpPrivateKeyPfx
          - RdpPrivateKeyPassword
      - Label:
          default: AutoScale Configuration
        Parameters:
          - DesiredCapacity
          - MinCapacity
          - MaxCapacity
          - ScaleDownDesiredCapacity
          - ScaleDownSchedule
          - ScaleUpSchedule
          - ForceUpdateToggle
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - SubnetIDs
      - Label:
          default: CloudFormation Configuration
        Parameters:
          - CloudWatchAgentUrl
    ParameterLabels:
      AmiNameSearchString:
        default: AMI Name Search Pattern
      ScaleDownDesiredCapacity:
        default: Scale Down Desired Capacity
  Version: 0.5.0
  cfn-lint:
    config:
      ignore_checks:
        - E3001
        - E7001
        - W1011
        - W2001
Outputs:
  Ec2SecurityGroupId:
    Description: Security Group ID for RDSH EC2 instances
    Value: !Ref Ec2SecurityGroup
  LoadBalancerDns:
    Description: DNS name for the Load Balancer
    Value: !Sub ${LoadBalancer.DNSName}
  LoadBalancerName:
    Description: Name of the Load Balancer
    Value: !Ref LoadBalancer
Parameters:
  AmiId:
    Default: ''
    Description: (Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString
    Type: String
  AmiNameSearchString:
    Default: Windows_Server-2016-English-Full-Base-*
    Description: Search pattern to match against an AMI Name
    Type: String
  CloudWatchAgentUrl:
    AllowedPattern: '^$|^s3://.*\.msi$'
    Default: ''
    Description: '(Optional) S3 URL to CloudWatch Agent MSI. Example: s3://amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi'
    Type: String
  ConnectionBrokerFqdn:
    AllowedPattern: '[a-zA-Z0-9_-]+\..+'
    Default: cb.example.com
    Description: Fully qualified domain name (FQDN) of the primary Connection Broker, e.g. "cb.example.com"
    MinLength: '3'
    Type: String
  DesiredCapacity:
    Default: '1'
    Description: The number of instances the autoscale group will spin up initially
    MinLength: '1'
    Type: String
  DomainAccessUserGroup:
    Default: Domain Users
    Description: Domain group of users authorized to use the RDSH
    MinLength: '1'
    Type: String
  DomainDirectoryId:
    AllowedPattern: 'd-[a-zA-Z0-9]{10}'
    Description: 'ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx'
    Type: String
  DomainDnsName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainNetbiosName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: EXAMPLE
    Description: Netbios name of the domain (e.g. EXAMPLE)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainSvcAccount:
    AllowedPattern: '[a-zA-Z0-9_-]*'
    Default: CbSvcAccount
    Description: User name for the account that will join the instance to the Connection Broker Cluster
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainSvcPassword:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Default: Password123
    Description: Password for the Connection Broker service account. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  ExtraSecurityGroupIds:
    Description: List of extra Security Group IDs to attach to the RDSH instances -- include _at least_ the SG allowing connectivity to the Connection Broker database
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  ForceUpdateToggle:
    AllowedValues:
      - A
      - B
    Default: A
    Description: A/B toggle that forces a change to a LaunchConfig property, triggering the AutoScale Update Policy
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - r4.large
      - r4.xlarge
    Default: t3.medium
    Description: Amazon EC2 instance type for the Remote Desktop Session Instance
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: 'AWS::EC2::KeyPair::KeyName'
  LdapContainerOU:
    Default: 'CN=Users,DC=example,DC=com'
    Description: DN of the LDAP container or OU in which the RDSH instance will be placed
    MinLength: '1'
    Type: String
  MaxCapacity:
    Default: '2'
    Description: The maximum number of instances for the autoscale group
    MinLength: '1'
    Type: String
  MinCapacity:
    Default: '0'
    Description: The minimum number of instances for the autoscale group
    MinLength: '1'
    Type: String
  RdpPrivateKeyPassword:
    Description: Password to the RDP certificate private key
    MaxLength: '1024'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  RdpPrivateKeyPfx:
    AllowedPattern: '^(.*)([/].*)+\.pfx$'
    Description: S3 bucket and path to a private key for the RDP certificate, e.g. "<bucket>/path/to/key.pfx"
    Type: String
  RdpPrivateKeyS3Endpoint:
    AllowedPattern: '^(https://s3)(.*)$'
    Default: 'https://s3.amazonaws.com'
    Description: S3 endpoint URL hosting the bucket where the RDP certificate private key is stored
    Type: String
  RepoBranchPrefixUrl:
    Description: URL prefix where the repo scripts can be retrieved
    Default: https://raw.githubusercontent.com/plus3it/cfn/master
    Type: String
    AllowedPattern: '^https:/.*'
  ScaleDownDesiredCapacity:
    Default: '1'
    Description: (Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset
    Type: Number
  ScaleDownSchedule:
    Default: ''
    Description: (Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. "0 0 * * *")
    Type: String
  ScaleUpSchedule:
    Default: ''
    Description: (Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. "0 10 * * Mon-Fri")
    Type: String
  SubnetIDs:
    Description: List of Subnet IDs where the RDSH instances and ELB we be launched
    Type: 'List<AWS::EC2::Subnet::Id>'
  UpdateSchedule:
    AllowedPattern: ^$|^cron\(.*\)$|^rate\(.*\)$|^$
    ConstraintDescription: Must be in CloudWatch events schedule expression format (Cron or Rate).
    Default: ''
    Description: '(Optional) Time interval between auto stack updates. Refer to the AWS documentation for valid input syntax: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html'
    Type: String
  UserProfileDiskPath:
    AllowedPattern: '^[\\\\]{2}[a-zA-Z0-9_\\-]+\..+'
    Default: \\home.example.com\Profiles$
    Description: Path to a CIFS share where User Profile Disks are stored, e.g. "\\home.example.com\Profiles$"
    MinLength: '3'
    Type: String
  VPC:
    Description: VPC ID
    Type: 'AWS::EC2::VPC::Id'
Resources:
  AmiIdLookup:
    Condition: UseAmiLookup
    Properties:
      AmiNameSearchString: !Ref AmiNameSearchString
      ForceUpdateToggle: !Ref ForceUpdateToggle
      Region: !Ref 'AWS::Region'
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-look-up-ami-ids'
    Type: 'Custom::AmiIdLookup'
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT75M
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: 8100
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: !Ref MaxCapacity
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !Ref MinCapacity
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Ref 'AWS::StackName'
      TargetGroupARNs:
        - !Ref TargetGroup
      TerminationPolicies:
        - OldestInstance
        - Default
      VPCZoneIdentifier: !Ref SubnetIDs
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  AutoUpdateStack:
    Condition: UseAutoUpdateStack
    Properties:
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-update-scheduler-dev-cfn_auto_update_broker'
      StackName: !Ref 'AWS::StackName'
      ToggleParameter: ForceUpdateToggle
      ToggleValues:
        - A
        - B
      UpdateSchedule: !Ref UpdateSchedule
    Type: 'Custom::AutoUpdateStack'
  Ec2IamInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref Ec2IamRole
    Type: 'AWS::IAM::InstanceProfile'
  Ec2IamRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
        Version: 2012-10-17
      Path: /
    Type: 'AWS::IAM::Role'
  Ec2IamRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ssm:DescribeAssociation'
              - 'ssm:GetDeployablePatchSnapshotForInstance'
              - 'ssm:GetDocument'
              - 'ssm:ListAssociations'
              - 'ssm:ListInstanceAssociations'
              - 'ssm:PutInventory'
              - 'ssm:UpdateAssociationStatus'
              - 'ssm:UpdateInstanceAssociationStatus'
              - 'ssm:UpdateInstanceInformation'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2messages:AcknowledgeMessage'
              - 'ec2messages:DeleteMessage'
              - 'ec2messages:FailMessage'
              - 'ec2messages:GetEndpoint'
              - 'ec2messages:GetMessages'
              - 'ec2messages:SendReply'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ec2:DescribeInstanceStatus'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'ds:CreateComputer'
              - 'ds:DescribeDirectories'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${RdpPrivateKeyPfx}'
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::amazon-ssm-*'
              - 'arn:aws:s3:::amazoncloudwatch-agent/*'
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource: 'arn:aws:s3:::amazon-ssm-packages-*'
          - Action:
              - 'autoscaling:DescribeAutoScalingInstances'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'autoscaling:SuspendProcesses'
            Condition:
              StringEquals:
                'autoscaling:ResourceTag/aws:cloudformation:stack-id': !Ref 'AWS::StackId'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub 'ra-rdsh-${AWS::StackName}'
      Roles:
        - !Ref Ec2IamRole
    Type: 'AWS::IAM::Policy'
  Ec2SecurityGroup:
    Properties:
      GroupDescription: Allow Remote Access to the RDSH instances
      Tags:
        - Key: Name
          Value: !Sub 'ra-rdsh-ec2-${AWS::StackName}'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::SecurityGroup'
  LaunchConfig:
    Metadata:
      'AWS::CloudFormation::Authentication':
        Ec2IamRole:
          roleName: !Ref Ec2IamRole
          type: S3
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - join-domain
            - ps-modules
            - check-upd-path
            - install-cloudwatch-agent
            - setup
            - suspend-azrebalance
            - installRDS
            - finalize
          update:
            - ps-modules
            - suspend-azrebalance
            - setup
            - finalize
        finalize:
          commands:
            10-signal-success:
              command: !Sub
                - ${SignalSuccess}
                - SignalSuccess: !Sub
                    - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
                    - Command: !FindInMap [CfnUtilsMap, Signal, Success]
              ignoreErrors: 'true'
              waitAfterCompletion: '0'
        install-cloudwatch-agent:
          commands:
            10-install-cloudwatch-agent:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Invoke-Command -ScriptBlock {
                  $ErrorActionPreference = 'Stop';
                  Import-Module P3Utils;
                  $CloudWatchAgentUri = [System.Uri]'${CloudWatchAgentUrl}';
                  $CloudWatchAgentScriptDir = 'c:\cfn\scripts\AmazonCloudWatchAgent';
                  $CloudWatchAgentInstaller = Join-Path $CloudWatchAgentScriptDir $CloudWatchAgentUri.Segments[($CloudWatchAgentUri.Segments.Length-1)];
                  $Null = New-Item $CloudWatchAgentScriptDir -Type Directory -Force;
                  Read-S3Object -BucketName $CloudWatchAgentUri.Host -Key ($CloudWatchAgentUri.Segments[1..($CloudWatchAgentUri.Segments.Length-1)] -Join '') -File $CloudWatchAgentInstaller -Region ${AWS::Region};
                  $CloudWatchAgentConfig = $CloudWatchAgentScriptDir + '\aws-cloudwatch-agent-config.json';
                  Invoke-RetryCommand -Command Start-Process -ArgList @{ FilePath='msiexec.exe'; ArgumentList = @('/i', $CloudWatchAgentInstaller, '/qn'); NoNewWindow = $true; PassThru = $true; Wait = $true } -CheckExpression '$Return.Result.ExitCode -eq 0' -InitialDelay 17 -MaxDelay 59 -Verbose;
                  $CloudWatchAgentCtl = \"${!Env:ProgramFiles}\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1\";
                  & $CloudWatchAgentCtl -Action cond-restart;
                  & $CloudWatchAgentCtl -a fetch-config -m ec2 -c file:$CloudWatchAgentConfig -s;
                  }
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
          files:
            'c:\cfn\scripts\AmazonCloudWatchAgent\aws-cloudwatch-agent-config.json':
              content: !Sub
                - |-
                  {
                    "logs": {
                      "logs_collected" : {
                        "files" : {
                          "collect_list": [
                            {
                              "file_path": "c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/ProgramData/Amazon/AmazonCloudWatchAgent/Logs/amazon-cloudwatch-agent.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "c:\\cfn\\log\\cfn-init.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/cfn/log/cfn-init.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            },
                            {
                              "file_path": "c:\\cfn\\log\\cfn-init-cmd.log",
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//c/cfn/log/cfn-init-cmd.log",
                              "timestamp_format": "%H:%M:%S %y %b %-d"
                            }
                          ]
                        },
                        "windows_events" : {
                          "collect_list" : [
                            {
                              "event_name": "System",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/System",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Application",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/Application",
                              "event_format": "text"
                            },
                            {
                              "event_name": "Microsoft-Windows-TerminalServices-SessionBroker-Client/Operational",
                              "event_levels": ["WARNING", "ERROR", "INFORMATION"],
                              "log_group_name": "${local_InstanceLogGroup}",
                              "log_stream_name": "{instance_id}//EventLog/Microsoft-Windows-TerminalServices-SessionBroker-Client/Operational",
                              "event_format": "text"
                            }
                          ]
                        }
                      },
                      "log_stream_name": "default_logs_{instance_id}"
                    }
                  }
                - local_InstanceLogGroup: !If [InstallCloudWatchAgent, !Ref LaunchConfigLogGroup, !Ref 'AWS::NoValue']
        installRDS:
          commands:
            10-install-rds:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Import-Module P3Utils;
                  Invoke-RetryCommand
                  -Command Install-WindowsFeature
                  -ArgList @{Name=@(\"RDS-RD-Server\",\"RDS-Licensing\",\"Search-Service\",\"RSAT-ADDS-Tools\",\"RSAT-DNS-Server\",\"GPMC\")}
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
            15-reboot-rds:
              command: !Sub
                - ${PowershellCommand} -Command "Restart-Computer -Force -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: forever
            20-configure-admins:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Invoke-Command -ScriptBlock {
                  $ErrorActionPreference = 'Stop';
                  Import-Module RemoteDesktop,RemoteDesktopServices;
                  if (-not ('${DomainSvcAccount}' -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) {
                  [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', '${DomainSvcAccount}');
                  } }
                  -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
            30-configure-rdsh:
              command: !Sub
                - >-
                  ${PsExecCommand} -u "${DomainNetbiosName}\${DomainSvcAccount}" -p "${DomainSvcPassword}"
                  ${PowershellCommand} c:\cfn\scripts\configure-rdsh.ps1
                  -DomainNetBiosName '${DomainNetbiosName}'
                  -GroupName '${DomainAccessUserGroup}'
                  -ConnectionBroker '${ConnectionBrokerFqdn}'
                  -UpdPath '${UserProfileDiskPath}'
                  -PrivateKeyPfx 'c:\cfn\files\rdp.pfx'
                  -PrivateKeyPassword '"${RdpPrivateKeyPassword}"'
                  -HealthCheckEndPoint
                  -Verbose -ErrorAction Stop || ${SignalFailure}
                - PsExecCommand: !FindInMap [ShellCommandMap, psexec, command]
                  PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              # Pause a bit here to let services settle...
              waitAfterCompletion: '30'
            40-reboot-rds:
              command: !Sub
                - ${PowershellCommand} -Command "Restart-Computer -Force -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: forever
        join-domain:
          commands:
            10-join-domain:
              command: !Sub
                - ${PowershellCommand} -Command Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
              waitAfterCompletion: forever
        check-upd-path:
          commands:
            10-check-path:
              command: !Sub
                - >-
                  ${PowershellCommand} -Command "
                  Import-Module P3Utils;
                  Invoke-RetryCommand -Command Test-Path -ArgList @{ Path='filesystem::${UserProfileDiskPath}' } -Verbose -ErrorAction Stop" || ${SignalFailure}
                - PowershellCommand: !FindInMap [ShellCommandMap, powershell, command]
                  SignalFailure: !Sub
                    - (${Command} --stack ${AWS::StackName} --region ${AWS::Region} && exit /b 1)
                    - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
              waitAfterCompletion: '0'
        ps-modules:
          files:
            'C:\Program Files\WindowsPowerShell\Modules\P3Utils\P3Utils.psd1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3Utils/P3Utils.psd1
            'C:\Program Files\WindowsPowerShell\Modules\P3Utils\P3Utils.psm1':
              source: !Sub ${RepoBranchPrefixUrl}/psmodules/P3Utils/P3Utils.psm1
        setup:
          commands:
            a-unzip-pstools:
              command: powershell.exe c:\cfn\scripts\unzip-archive.ps1 c:\cfn\files\pstools.zip c:\cfn\files\pstools
              waitAfterCompletion: '0'
            b-restrict-cfn-permissions:
              'Fn::Transform':
                Name: 'AWS::Include'
                Parameters:
                  Location: s3://app-chemistry/snippets/restrict_cfn_permissions.snippet.cfn.yaml
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            'c:\cfn\files\pstools.zip':
              source: 'https://download.sysinternals.com/files/PSTools.zip'
            'c:\cfn\files\rdp.pfx':
              authentication: Ec2IamRole
              source: !Sub '${RdpPrivateKeyS3Endpoint}/${RdpPrivateKeyPfx}'
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Sub
                - |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  action=${InitUpdate}
                - InitUpdate: !Sub
                    - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
                    - Command: !FindInMap [CfnUtilsMap, Init, Update]
            'c:\cfn\scripts\configure-rdsh.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/configure-rdsh.ps1
            'c:\cfn\scripts\unzip-archive.ps1':
              source: !Sub ${RepoBranchPrefixUrl}/scripts/unzip-archive.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
        suspend-azrebalance:
          'Fn::Transform':
            Name: 'AWS::Include'
            Parameters:
              Location: s3://app-chemistry/snippets/autoscaling_suspend_azrebalance_win.snippet.cfn.yaml
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 50
            VolumeType: gp2
      EbsOptimized: !FindInMap [InstanceTypeMap, !Ref InstanceType, SupportsEbsOptimized]
      IamInstanceProfile: !Ref Ec2IamInstanceProfile
      ImageId: !If [UseAmiLookup, !Sub '${AmiIdLookup.Id}', AmiId]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups: !Split
        - ','
        - !Sub
          - '${Ec2SecurityGroup},${local_ExtraSecurityGroupIds}'
          - local_ExtraSecurityGroupIds: !Join [',', !Ref ExtraSecurityGroupIds]
      UserData:
        Fn::Base64: !Sub
          - |
            <script>
            REM CFN LaunchConfig Update Toggle: ${ForceUpdateToggle}
            ${InitConfig}
            if %ERRORLEVEL% equ 0 goto success

            :error
            ${SignalFailure}
            echo "ERROR: cfn-init failed! Aborting!"
            exit /b 1

            :success
            </script>
          - InitConfig: !Sub
              - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
              - Command: !FindInMap [CfnUtilsMap, Init, Config]
            SignalFailure: !Sub
              - ${Command} --stack ${AWS::StackName} --region ${AWS::Region}
              - Command: !FindInMap [CfnUtilsMap, Signal, Failure]
    Type: 'AWS::AutoScaling::LaunchConfiguration'
  LaunchConfigLogGroup:
    Condition: InstallCloudWatchAgent
    Properties:
      LogGroupName: !Sub /aws/ec2/win/${AWS::StackName}
    Type: 'AWS::Logs::LogGroup'
  LoadBalancer:
    Properties:
      Scheme: internal
      Subnets: !Ref SubnetIDs
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      Type: network
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  LoadBalancerListener3389:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3389
      Protocol: TCP
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  PublicToRdshIngressTcp3389:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 3389
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      ToPort: 3389
    Type: 'AWS::EC2::SecurityGroupIngress'
  PublicToRdshIngressTcp8091:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 8091
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      ToPort: 8091
    Type: 'AWS::EC2::SecurityGroupIngress'
  ScaleDownScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: !Ref ScaleDownDesiredCapacity
      Recurrence: !Ref ScaleDownSchedule
    Type: 'AWS::AutoScaling::ScheduledAction'
  ScaleUpScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: !Ref MaxCapacity
      Recurrence: !Ref ScaleUpSchedule
    Type: 'AWS::AutoScaling::ScheduledAction'
  SsmAssociationCloudWatchMetrics:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: s3://app-chemistry/snippets/ssm_cloudwatch_asg_memory_disk_c.snippet.cfn.yaml
  SsmAssociationJoinDomain:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: s3://app-chemistry/snippets/ssm_join_domain_ou.snippet.cfn.yaml
  TargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /ping.html
      HealthCheckPort: '8091'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      Name: !Ref 'AWS::StackName'
      Port: 3389
      Protocol: TCP
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      VpcId: !Ref VPC
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
